#!/bin/bash

set -e

. /etc/default/openmediavault
. /usr/share/openmediavault/scripts/helper-functions

OMV_BACKUP_DIR_NAME=${OMV_BACKUP_DIR_NAME:-"omvbackup"}
OMV_BACKUP_FILE_PREFIX=${OMV_BACKUP_FILE_PREFIX:-"backup-omv"}

purgeOld()
{
    # get number of days to keep
    keep=$(omv_config_get "/config/system/backup/keep")
    if [[ ${keep} -gt 0 ]]; then
        echo "Purging old files..."
        find "${backupDir}" -maxdepth 1 -type f -mtime +${keep} -name "${OMV_BACKUP_FILE_PREFIX}*" -delete
        echo "Purging done."
    else
        echo "Purging disabled."
    fi
}

# date
date=$(date +"%d-%b-%Y_%H-%M-%S")

# clean apt-get cache to save space
apt-get clean

# clean openmediavault upload cache and recreate Packages file
rm -f /var/cache/openmediavault/archives/*
touch /var/cache/openmediavault/archives/Packages

# Get the shared folder reference and path
sfref=$(omv_config_get "/config/system/backup/sharedfolderref")
if ! omv_isuuid "${sfref}"; then
    echo "No backup volume set.  Please choose a backup volume."
    exit 1
fi
sfpath="$(omv_get_sharedfolder_path "${sfref}")"
if [ ! -d "${sfpath}" ]; then
    echo "Shared folder directory does not exist.  Exiting..."
    exit 1
fi

# set backup directory and create it if it doesn't exist
backupDir="${sfpath}/${OMV_BACKUP_DIR_NAME}"
mkdir -p "${backupDir}"

# Get the method of backup
method=$(omv_config_get "/config/system/backup/method")
echo "Method: ${method}"

# get device file for /
devicefile=$(awk '$5 == "/" { print $10 }' /proc/self/mountinfo)
echo "Device file:  ${devicefile}"

# try alternate method to get root device if /dev/root is returned
if [ "${devicefile}" = "/dev/root" ]; then
  devicefile=$(findmnt -n / | awk '{ print $2 }')
fi

if [ "${devicefile}" = "/dev/root" ] || [ -z "${devicefile}" ]; then
    echo "Could not determine root device file. Please specify in the root device textbox. Exiting..."
    exit 1
fi

# get root device
root=$(omv_config_get "/config/system/backup/root")

# if root is empty, try to determine root device
if [ -z "${root}" ]; then
    root="/dev/$(lsblk -no pkname ${devicefile})"
fi
echo "Root drive: ${root}"

if [ -z "${root}" ]; then
    echo "Could not determine root device.  Exiting..."
    exit 1
fi

# save helpful information
fdisk -l ${root} > "${backupDir}/${OMV_BACKUP_FILE_PREFIX}-${date}.fdisk"
blkid > "${backupDir}/${OMV_BACKUP_FILE_PREFIX}-${date}.blkid"
dpkg -l | grep openmediavault > "${backupDir}/${OMV_BACKUP_FILE_PREFIX}-${date}.packages"

# calculate partition table size to accommodate GPT and MBR.
part_type=$(blkid -p ${root} | cut -d \" -f4)
if [ "${part_type}" = "gpt" ]; then
    num_parts=$(parted -m ${root} print | tail -n1 | cut -b1)
    grubparts_bs_calc=$(((128 * ${num_parts}) + 1024))
else
    grubparts_bs_calc=512
fi


# save partition table and mbr
dd if=${root} of="${backupDir}/${OMV_BACKUP_FILE_PREFIX}-${date}.grub" bs=446 count=1
dd if=${root} of="${backupDir}/${OMV_BACKUP_FILE_PREFIX}-${date}.grubparts" bs=${grubparts_bs_calc} count=1

# check for /boot partition
bootpart=$(grep -w /boot /proc/mounts | awk '{ print $1 }')
if [ ! -b "${bootpart}" ]; then
    bootpart=""
else
    echo "Boot drive: ${bootpart}"
fi

# backup u-boot if platform_install.sh exists
if [ -f "/usr/lib/u-boot/platform_install.sh" ]; then
    . /usr/lib/u-boot/platform_install.sh
    if [ -d "${DIR}" ]; then
        tar cjf "${backupDir}/${OMV_BACKUP_FILE_PREFIX}_u-boot-${date}.tar.bz" ${DIR}/*
    fi
fi

# perform backup based on method selected
case ${method} in
    dd)
        echo "Using dd..."
        dd if=${devicefile} bs=1M conv=sync,noerror status=progress | gzip -c > "${backupDir}/${OMV_BACKUP_FILE_PREFIX}-${date}.dd.gz"
        sync
        if [ -n "${bootpart}" ]; then
            dd if=${bootpart} bs=1M conv=sync,noerror status=progress | gzip -c > "${backupDir}/${OMV_BACKUP_FILE_PREFIX}_boot-${date}.dd.gz"
        fi
        sync
        touch "${backupDir}/${OMV_BACKUP_FILE_PREFIX}"*-${date}.dd.gz
        purgeOld
        ;;

    ddfull)
        echo "Using dd full disk..."
        dd if=${root} bs=1M conv=sync,noerror status=progress | gzip -c > "${backupDir}/${OMV_BACKUP_FILE_PREFIX}-${date}.ddfull.gz"
        sync
        sync
        touch "${backupDir}/${OMV_BACKUP_FILE_PREFIX}"*-${date}.ddfull.gz
        purgeOld
        ;;

    fsarchiver)
        echo "Using FSArchiver..."
        extra=$(omv_config_get "/config/system/backup/extraoptions")
        passwd="$(omv_config_get "/config/system/backup/passwd")"
        password=""
        if [ -n "${passwd}" ]; then
            echo "Encrypting archive..."
            password="--cryptpass=${passwd} "
        fi
        fsarchiver savefs ${password}-o "${backupDir}/${OMV_BACKUP_FILE_PREFIX}-${date}.fsa" ${devicefile} ${bootpart} -v -A ${extra}
        touch "${backupDir}/${OMV_BACKUP_FILE_PREFIX}"-${date}.*
        purgeOld
        fsarchiver archinfo ${password} "${backupDir}/${OMV_BACKUP_FILE_PREFIX}-${date}.fsa"
        ;;

    borg)
        echo "Using borgbackup..."
        extra=$(omv_config_get "/config/system/backup/extraoptions")
        passwd="$(omv_config_get "/config/system/backup/passwd")"
        if [ -n "${passwd}" ]; then
            echo "Encrypting archive..."
            export BORG_PASSPHRASE="${passwd}"
        fi
        if [ ! -d "${backupDir}/borgbackup" ] ; then
          # First run - init borg directory
          if [ -n "${passwd}" ]; then
            borg init -e repokey "${backupDir}/borgbackup"
          else
            borg init -e none "${backupDir}/borgbackup"
          fi
        fi
        borg create --stats "${backupDir}/borgbackup::${OMV_BACKUP_FILE_PREFIX}-${date}" / \
          -x --exclude-caches \
          -e "/dev" -e "/proc" -e "/sys" -e "/tmp" -e "/run" -e "/mnt" \
          -e "/media" -e "/lost+found" -e "/export" -e "/home/ftp" -e "/srv" ${extra}
        keep=$(omv_config_get "/config/system/backup/keep")
        if [[ ${keep} -gt 0 ]]; then
          purgeOld
          borg prune "${backupDir}/borgbackup" --keep-daily "${keep}"
        fi
        ;;

    rsync)
        echo "Using rsync..."
        extra=$(omv_config_get "/config/system/backup/extraoptions")

        rsync -aAXvxx /* "${backupDir}/" \
            --delete \
            --exclude=/dev \
            --exclude=/proc \
            --exclude=/sys \
            --exclude=/tmp \
            --exclude=/run \
            --exclude=/mnt \
            --exclude=/media \
            --exclude=/lost+found \
            --exclude=/export \
            --exclude=/home/ftp \
            --exclude=/srv ${extra}
        purgeOld
        ;;
esac

exit 0
